<?xml version="1.0" encoding="utf-8" standalone="no"?>
<TfrxReport Version="2022.3" DotMatrixReport="False" IniFile="\Software\Fast Reports" PreviewOptions.Buttons="167935" PreviewOptions.Zoom="1" PrintOptions.Printer="Padrão" PrintOptions.PrintOnSheet="0" ReportOptions.CreateDate="44102,3801251968" ReportOptions.Description.Text="" ReportOptions.LastChange="44887,3814374884" ScriptLanguage="PascalScript" ScriptText.Text="var&#13;&#10;  status: boolean;&#13;&#10;  xCampo_Serie1: String;&#13;&#10;  xCampo_Serie2: String;&#13;&#10;  yCampo_Serie1: String;&#13;&#10;  yCampo_Serie2: String;&#13;&#10;&#13;&#10;&#13;&#10;procedure PaginaOnBeforePrint(Sender: TfrxComponent);&#13;&#10;var&#13;&#10;i: Integer;&#13;&#10;xNomeParam: String;&#13;&#10;begin&#13;&#10;  Memo_Titulo.align := baNone;&#13;&#10;  Memo_Empresa.align := baNone;&#13;&#10;  Memo_Linha1.align := baNone;&#13;&#10;  Memo_Linha2.align := baNone;&#13;&#10;  Memo_Linha3.align := baNone;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure dDialogPageOnShow(Sender: TfrxComponent);&#13;&#10;var&#13;&#10; i, COD_EMPRESA: integer;&#13;&#10;begin&#13;&#10; edtMaskDtInicial.Text := FormatDateTime('dd/mm/yyyy',Now-30);&#13;&#10; edtMaskDtFinal.Text := FormatDateTime('dd/mm/yyyy',Now);&#13;&#10;  i := 0;&#13;&#10;  ESTAB_DIAG.First;&#13;&#10;  While not ESTAB_DIAG.Eof do&#13;&#10;  begin&#13;&#10;    if(Length(&#60;ESTAB_DIAG.&#34;CNPJCPF_ESTB&#34;&#62;) = 14) Then&#13;&#10;    Begin&#13;&#10;      CkLstBxEmpresa.Items.Add(&#60;ESTAB_DIAG.&#34;EMPRESA&#34;&#62; + ' CNPJ: ' + FormatFloat('00&#34;.&#34;000&#34;.&#34;000&#34;/&#34;0000&#34;-&#34;00;0', &#60;ESTAB_DIAG.&#34;CNPJCPF_ESTB&#34;&#62;));&#13;&#10;    End Else&#13;&#10;    if(Length(&#60;ESTAB_DIAG.&#34;CNPJCPF_ESTB&#34;&#62;) = 11) Then&#13;&#10;    Begin&#13;&#10;      CkLstBxEmpresa.Items.Add(&#60;ESTAB_DIAG.&#34;EMPRESA&#34;&#62; + ' CPF: ' + FormatFloat('000&#34;.&#34;000.000&#34;-&#34;00;0', &#60;ESTAB_DIAG.&#34;CNPJCPF_ESTB&#34;&#62;));&#13;&#10;    End Else&#13;&#10;    if(Length(&#60;ESTAB_DIAG.&#34;CNPJCPF_ESTB&#34;&#62;) &#62; 0) Then&#13;&#10;    Begin&#13;&#10;      CkLstBxEmpresa.Items.Add(&#60;ESTAB_DIAG.&#34;EMPRESA&#34;&#62; + ' CPF/CNPJ: ' + &#60;ESTAB_DIAG.&#34;CNPJCPF_ESTB&#34;&#62;);&#13;&#10;    End Else&#13;&#10;    Begin&#13;&#10;      CkLstBxEmpresa.Items.Add(&#60;ESTAB_DIAG.&#34;EMPRESA&#34;&#62;);&#13;&#10;    End;&#13;&#10;    if(&#60;ESTAB_DIAG.&#34;COD_ESTAB&#34;&#62; = &#60;ESTAB.&#34;COD_ESTAB&#34;&#62;) Then&#13;&#10;    Begin&#13;&#10;      COD_EMPRESA := i;&#13;&#10;    End;&#13;&#10;    i := i + 1;&#13;&#10;    ESTAB_DIAG.Next;&#13;&#10;  end;&#13;&#10;  CkLstBxEmpresa.Checked[COD_EMPRESA] := True;&#13;&#10;  CkLstBxEmpresa.ItemIndex := COD_EMPRESA;&#13;&#10;  edtMaskDtInicial.SetFocus;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure SetDataI(ADataI: TDateTime);&#13;&#10;begin&#13;&#10; edtMaskDtInicial.Text := FormatDateTime('dd/mm/yyyy',ADataI);&#13;&#10;end;&#13;&#10;&#13;&#10;procedure SetDataF(ADataF: TDateTime);&#13;&#10;begin&#13;&#10; edtMaskDtFinal.Text := FormatDateTime('dd/mm/yyyy',ADataF);&#13;&#10;end;&#13;&#10;&#13;&#10;function MinDate(Year, Month, Day : Word) : TDateTime;&#13;&#10;var&#13;&#10;  Cont : Boolean;&#13;&#10;  DateAux  : TDateTime;&#13;&#10;begin&#13;&#10;  Cont := True;&#13;&#10;  DateAux  := Date;&#13;&#10;  while Cont do&#13;&#10;  try&#13;&#10;    DateAux  := EncodeDate (Year, Month, Day);&#13;&#10;    Cont := False;&#13;&#10;  except&#13;&#10;    Dec(Day);&#13;&#10;  end;&#13;&#10;  Result := DateAux;&#13;&#10;end;&#13;&#10;&#13;&#10;function IncMonth(AData : TDateTime; iMeses: integer=1) : TDateTime;&#13;&#10;var&#13;&#10;  Year, month, Day : word;&#13;&#10;  i: integer;&#13;&#10;  absiMeses: integer;&#13;&#10;begin&#13;&#10; if iMeses &#60; 0 then absiMeses := iMeses * (-1) else absiMeses := iMeses;&#13;&#10; for i:=1 to absiMeses do&#13;&#10; begin&#13;&#10;  DecodeDate(AData, Year, Month, Day);&#13;&#10;  if iMeses &#62;0 then&#13;&#10;  begin&#13;&#10;   if Month = 12 then&#13;&#10;   begin&#13;&#10;    Month := 1;&#13;&#10;    Inc (Year);&#13;&#10;   end else&#13;&#10;   Inc (Month);&#13;&#10;  end&#13;&#10;  else&#13;&#10;  begin&#13;&#10;   if Month = 01 then&#13;&#10;   begin&#13;&#10;    Month := 12;&#13;&#10;    dec (Year);&#13;&#10;   end else&#13;&#10;   dec (Month);&#13;&#10;  end;&#13;&#10;  try&#13;&#10;    AData := EncodeDate(Year, Month, Day);&#13;&#10;  except&#13;&#10;   if (month = 2) and (Day &#62; 28) then AData := EncodeDate(Year, Month, Day-1)&#13;&#10;  end;&#13;&#10; end;&#13;&#10; Result := MinDate(Year, Month, Day);&#13;&#10;end;&#13;&#10;&#13;&#10;procedure ComboBox1OnChange(Sender: TfrxComponent);&#13;&#10;var&#13;&#10; dtHoje: TDateTime;&#13;&#10; DiaSemanaHoje: Byte;&#13;&#10;const&#13;&#10;	prENTRE_DATAS = 0;&#13;&#10;	prONTEM = 1;&#13;&#10;	prHOJE = 2;&#13;&#10;	prAMANHA = 3;&#13;&#10;	prSEMANA_ANTERIOR = 4;&#13;&#10;	prSEMANA_ATUAL = 5;&#13;&#10;	prSEMANA_SEGUINTE = 6;&#13;&#10;    prMES_ANTERIOR = 7;&#13;&#10;	prMES_ATUAL = 8;&#13;&#10;	prMES_SEGUINTE = 9;&#13;&#10;	prANO_ANTERIOR = 10;&#13;&#10;	prANO_ATUAL = 11;&#13;&#10;	prANO_SEGUINTE = 12;&#13;&#10;	prTODOS = 13;&#13;&#10;begin&#13;&#10;  dtHoje := Now;&#13;&#10;  with cbPeriodo do&#13;&#10;  begin&#13;&#10;  if ItemIndex = prONTEM then&#13;&#10;  begin&#13;&#10;   SetDataI(dtHoje - 1);&#13;&#10;   SetDataF(strtoDateTime(FormatDateTime('dd/mm/yyyy 23:59:59', dtHoje - 1)));&#13;&#10;  end;&#13;&#10;&#13;&#10;  if ItemIndex in [prHOJE, prENTRE_DATAS] then&#13;&#10;  begin&#13;&#10;   SetDataI(dtHoje);&#13;&#10;   SetDataF(strtoDateTime(FormatDateTime('dd/mm/yyyy 23:59:59', dtHoje)));&#13;&#10;  end;&#13;&#10;  if ItemIndex = prAMANHA then&#13;&#10;  begin&#13;&#10;   SetDataI(dtHoje+1);&#13;&#10;   SetDataF(strtoDateTime(FormatDateTime('dd/mm/yyyy 23:59:59', dtHoje+1)));&#13;&#10;  end;&#13;&#10;  if ItemIndex = prSEMANA_ANTERIOR then&#13;&#10;  begin&#13;&#10;   DiaSemanaHoje := DayOfWeek(dtHoje-7);&#13;&#10;   SetDataI(dtHoje-7 - (DiaSemanaHoje - 1));&#13;&#10;   SetDataF(strtoDateTime(FormatDateTime('dd/mm/yyyy 23:59:59',  dtHoje-7 + (7 - DiaSemanaHoje))));&#13;&#10;  end;&#13;&#10;  if ItemIndex = prSEMANA_ATUAL then&#13;&#10;  begin&#13;&#10;   DiaSemanaHoje := DayOfWeek(dtHoje);&#13;&#10;   SetDataI(dtHoje - (DiaSemanaHoje - 1));&#13;&#10;   SetDataF(strtoDateTime(FormatDateTime('dd/mm/yyyy 23:59:59',  dtHoje + (7 - DiaSemanaHoje))));&#13;&#10;  end;&#13;&#10;  if ItemIndex = prSEMANA_SEGUINTE then&#13;&#10;  begin&#13;&#10;   DiaSemanaHoje := DayOfWeek(dtHoje+7);&#13;&#10;   SetDataI(dtHoje+7 - (DiaSemanaHoje - 1));&#13;&#10;   SetDataF(strtoDateTime(FormatDateTime('dd/mm/yyyy 23:59:59',  dtHoje+7 + (7 - DiaSemanaHoje))));&#13;&#10;  end;&#13;&#10;  if ItemIndex = prMES_ANTERIOR then&#13;&#10;  begin&#13;&#10;   dtHoje := IncMonth(dtHoje,-1);&#13;&#10;   SetDataI(strtodatetime(FormatDateTime('01/mm/yyyy', dtHoje)));&#13;&#10;   SetDataF(strtodatetime(FormatDateTime('01/mm/yyyy 23:59:59', IncMonth(dtHoje))) - 1);&#13;&#10;  end;&#13;&#10;  if ItemIndex = prMES_ATUAL then&#13;&#10;  begin&#13;&#10;   SetDataI(strtodatetime(FormatDateTime('01/mm/yyyy', dtHoje)));&#13;&#10;   SetDataF(strtodatetime(FormatDateTime('01/mm/yyyy 23:59:59', IncMonth(dtHoje))) - 1);&#13;&#10;  end;&#13;&#10;  if ItemIndex = prMES_SEGUINTE then&#13;&#10;  begin&#13;&#10;   dtHoje := IncMonth(dtHoje,1);&#13;&#10;   SetDataI(strtodatetime(FormatDateTime('01/mm/yyyy', dtHoje)));&#13;&#10;   SetDataF(strtodatetime(FormatDateTime('01/mm/yyyy 23:59:59', IncMonth(dtHoje))) - 1);&#13;&#10;  end;&#13;&#10;  if ItemIndex = prANO_ANTERIOR then&#13;&#10;  begin&#13;&#10;   dtHoje := IncMonth(dtHoje,-12);&#13;&#10;   SetDataI(strtodatetime(FormatDateTime('01/01/yyyy', dtHoje)));&#13;&#10;   SetDataF(strtodatetime(FormatDateTime('31/12/yyyy 23:59:59', dtHoje)));&#13;&#10;  end;&#13;&#10;  if ItemIndex = prANO_ATUAL then&#13;&#10;  begin&#13;&#10;   SetDataI(strtodatetime(FormatDateTime('01/01/yyyy', dtHoje)));&#13;&#10;   SetDataF(strtodatetime(FormatDateTime('31/12/yyyy 23:59:59', dtHoje)));&#13;&#10;  end;&#13;&#10;  if ItemIndex = prANO_SEGUINTE then&#13;&#10;  begin&#13;&#10;   dtHoje := IncMonth(dtHoje,12);&#13;&#10;   SetDataI(strtodatetime(FormatDateTime('01/01/yyyy', dtHoje)));&#13;&#10;   SetDataF(strtodatetime(FormatDateTime('31/12/yyyy 23:59:59', dtHoje)));&#13;&#10;  end;&#13;&#10; end;&#13;&#10;end;&#13;&#10;&#13;&#10;function StringReplace_NOVO(const S, OldPattern, NewPattern: string): string;&#13;&#10;var&#13;&#10;  SearchStr, Patt, NewStr: string;&#13;&#10;  Offset: Integer;&#13;&#10;begin&#13;&#10;  SearchStr := S;&#13;&#10;  Patt := OldPattern;&#13;&#10;&#13;&#10;  NewStr := S;&#13;&#10;  Result := '';&#13;&#10;  while SearchStr &#60;&#62; '' do&#13;&#10;  begin&#13;&#10;    Offset := Pos(Patt, SearchStr);&#13;&#10;    if Offset = 0 then&#13;&#10;    begin&#13;&#10;      Result := Result + NewStr;&#13;&#10;      Break;&#13;&#10;    end;&#13;&#10;    Result := Result + Copy(NewStr, 1, Offset - 1) + NewPattern;&#13;&#10;    NewStr := Copy(NewStr, Offset + Length(OldPattern), 1000000);&#13;&#10;    SearchStr := Copy(SearchStr, Offset + Length(Patt), 1000000);&#13;&#10;  end;&#13;&#10;end;&#13;&#10;&#13;&#10;function TratarString(Avalue: String): String;&#13;&#10;var&#13;&#10; EValor: boolean;&#13;&#10; i: integer;&#13;&#10; iLista: integer;&#13;&#10; AValueOriginal: string;&#13;&#10;begin&#13;&#10;	Avalue := StringReplace(Avalue, '*', '%');&#13;&#10;	//Teste se é número.&#13;&#10;	try&#13;&#10;		iLista := 0;&#13;&#10;		for i:=0 to Length(AValue)  do&#13;&#10;		begin&#13;&#10;			if copy(AValue,i,1) = ',' then iLista := iLista + 1;&#13;&#10;		end;&#13;&#10;		if iLista &#62; 1 then&#13;&#10;			eValor := false&#13;&#10;		else&#13;&#10;		begin&#13;&#10;      AValueOriginal := AValue;&#13;&#10;      StrToFloat(AValue);&#13;&#10;			AValue := StringReplace(Avalue, ',', '.');&#13;&#10;			EValor := true;&#13;&#10;			Result := AValue;&#13;&#10;			exit;&#13;&#10;		end;&#13;&#10;	except&#13;&#10;		EValor := false;&#13;&#10;		AValue := AValueOriginal;&#13;&#10;	end;&#13;&#10;&#13;&#10; if iLista = 0 then&#13;&#10; begin&#13;&#10;		Result := #39+AValue+#39;&#13;&#10; end&#13;&#10;	else&#13;&#10;	begin&#13;&#10;		//lista&#13;&#10;  AValue := trim(StringReplace(AValue,'&#34;',#39));&#13;&#10;  AValue := StringReplace(AValue,#39,'');&#13;&#10;  AValue := trim(StringReplace(AValue,';', ','));&#13;&#10;  AValue := #39+StringReplace(AValue,',', #39 + ','+ #39)+#39;&#13;&#10;  for I:=0 to 10 do&#13;&#10;  begin&#13;&#10;   AValue := StringReplace(AValue, #39 + ' ',#39);&#13;&#10;   AValue := StringReplace(AValue, ' ' + #39,#39);&#13;&#10;  end;&#13;&#10;  Result := AValue;&#13;&#10;	end;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure dDialogPageOnCloseQuery(Sender: TfrxComponent; var CanClose: Boolean);&#13;&#10;var&#13;&#10;EstiloMark: String;&#13;&#10;vGrafico : TfrxChartView;&#13;&#10;begin&#13;&#10; Qry.close;&#13;&#10; Memo_Titulo.text := StringReplace(Memo_Titulo.text,':Data_Inicial',edtMaskDtInicial.text);&#13;&#10; Memo_Linha1.text := StringReplace(Memo_Linha1.text,':Data_Inicial',edtMaskDtInicial.text);&#13;&#10; Memo_Linha2.text := StringReplace(Memo_Linha2.text,':Data_Inicial',edtMaskDtInicial.text);&#13;&#10; Memo_Linha3.text := StringReplace(Memo_Linha3.text,':Data_Inicial',edtMaskDtInicial.text);&#13;&#10; Memo_Titulo.text := StringReplace(Memo_Titulo.text,':Data_Final',edtMaskDtFinal.text);&#13;&#10; Memo_Linha1.text := StringReplace(Memo_Linha1.text,':Data_Final',edtMaskDtFinal.text);&#13;&#10; Memo_Linha2.text := StringReplace(Memo_Linha2.text,':Data_Final',edtMaskDtFinal.text);&#13;&#10; Memo_Linha3.text := StringReplace(Memo_Linha3.text,':Data_Final',edtMaskDtFinal.text);&#13;&#10;end;&#13;&#10;&#13;&#10;procedure Banda_DetalheOnBeforePrint(Sender: TfrxComponent);&#13;&#10;begin&#13;&#10;  try&#13;&#10;   Banda_Detalhe.Font.Style := nil;&#13;&#10;   if pos('N', Qry.FieldByName('FONT_STYLE').asstring) &#62; 0 then&#13;&#10;    Banda_Detalhe.Font.Style := Banda_Detalhe.Font.Style + fsBold;&#13;&#10;   if pos('I', Qry.FieldByName('FONT_STYLE').asstring) &#62; 0 then&#13;&#10;    Banda_Detalhe.Font.Style := Banda_Detalhe.Font.Style + fsItalic;&#13;&#10;   if pos('S', Qry.FieldByName('FONT_STYLE').asstring) &#62; 0 then&#13;&#10;    Banda_Detalhe.Font.Style := Banda_Detalhe.Font.Style + fsUnderLine;&#13;&#10;  except&#13;&#10;  end;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure CheckBox1OnClick(Sender: TfrxComponent);&#13;&#10;begin&#13;&#10;  if (CheckBox1.Checked = True) then&#13;&#10;    Picture1.Visible := True&#13;&#10;  else&#13;&#10;    Picture1.Visible := False;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure btnOKOnClick(Sender: TfrxComponent);&#13;&#10;var&#13;&#10; xCodigos: string;&#13;&#10; i, POSI, POSF: integer;&#13;&#10;begin&#13;&#10;  if(CheckBox1.Checked = True) Then&#13;&#10;  Begin&#13;&#10;    Try&#13;&#10;      Picture1.LoadFromFile(ExtractFilePath(Application.ExeName) + '/Imagens/Estab/' + IntToStr(&#60;ESTAB.&#34;COD_ESTAB&#34;&#62;) + '.JPG');&#13;&#10;    Except&#13;&#10;    End;&#13;&#10;  End;&#13;&#10;// --------------- Recolhendo os COD_ESTAB's --------------- \\&#13;&#10; xCodigos := '';&#13;&#10; for i := 0 to CkLstBxEmpresa.Items.Count-1 do&#13;&#10;  begin&#13;&#10;    posI := pos('[', CkLstBxEmpresa.items[i]) + 1;&#13;&#10;    posF := pos(']', CkLstBxEmpresa.items[i]) - posI;&#13;&#10;&#13;&#10;    if CkLstBxEmpresa.checked[i] then&#13;&#10;     xCodigos:=xCodigos +',' + trim(copy(CkLstBxEmpresa.items[i],PosI, PosF));&#13;&#10;  end;&#13;&#10;  if copy(xCodigos,1,1) = ',' then Delete(xCodigos,1,1);&#13;&#10;&#13;&#10;// --------------- Aplicando o COD_ESTAB na Qry --------------- \\&#13;&#10;  if xCodigos &#60;&#62; '' then&#13;&#10;  begin&#13;&#10;    Qry.SQL[12] := 'AND PROD.COD_ESTAB in (' + xCodigos + ')';&#13;&#10;    Qry.SQL[24] := 'AND DOC.COD_ESTAB in (' + xCodigos + ')';&#13;&#10;  end else&#13;&#10;  begin&#13;&#10;    Qry.SQL[12] := 'AND PROD.COD_ESTAB in (' + IntToStr(&#60;ESTAB.&#34;COD_ESTAB&#34;&#62;) + ')';&#13;&#10;    Qry.SQL[24] := 'AND DOC.COD_ESTAB in (' + IntToStr(&#60;ESTAB.&#34;COD_ESTAB&#34;&#62;) + ')';&#13;&#10;  end;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure edtMaskDtInicialOnKeyPress(Sender: TfrxComponent; var Key: Char);&#13;&#10;begin&#13;&#10;  Try&#13;&#10;    if not(key in ['0'..'9', #8]) then&#13;&#10;    Begin&#13;&#10;      key := '';&#13;&#10;      ShowMessage('Apenas números são aceitos');&#13;&#10;    End;&#13;&#10;  Except&#13;&#10;    Key := '';&#13;&#10;    ShowMessage('Apenas números são aceitos');&#13;&#10;  End;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure edtMaskDtFinalOnKeyPress(Sender: TfrxComponent; var Key: Char);&#13;&#10;begin&#13;&#10;  Try&#13;&#10;    if not(key in ['0'..'9', #8]) then&#13;&#10;    Begin&#13;&#10;      key := '';&#13;&#10;      ShowMessage('Apenas números são aceitos');&#13;&#10;    End;&#13;&#10;  Except&#13;&#10;    key := '';&#13;&#10;    ShowMessage('Apenas números são aceitos');&#13;&#10;  End;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure edtMaskDtInicialOnExit(Sender: TfrxComponent);&#13;&#10;Var&#13;&#10;  mes, dia, ano : integer;&#13;&#10;begin&#13;&#10;  mes := StrToInt(Copy(edtMaskDtInicial.Text, 4, 2));&#13;&#10;  dia := StrToInt(Copy(edtMaskDtInicial.Text, 1, 2));&#13;&#10;  ano := StrToInt(Copy(edtMaskDtInicial.Text, 7, 4));&#13;&#10;  IF((mes &#62;= 1) AND (mes &#60;= 12)) Then&#13;&#10;  Begin&#13;&#10;    IF(mes in [1, 3, 5, 7, 8, 10, 12]) Then&#13;&#10;    Begin&#13;&#10;      if(dia &#62; 31) Then&#13;&#10;      Begin&#13;&#10;        ShowMessage('Dia Não Existe no Mês Informado');&#13;&#10;        edtMaskDtInicial.SetFocus;&#13;&#10;      End;&#13;&#10;    End Else&#13;&#10;    if(mes in [2, 4, 6, 9, 11]) Then&#13;&#10;    Begin&#13;&#10;      if (((mes = 2) and (ano mod 4  = 0) and (dia &#62; 29)) or&#13;&#10;      ((mes = 2) and (ano mod 4  in [1, 2, 3]) and (dia &#62; 28))) Then&#13;&#10;      Begin&#13;&#10;        ShowMessage('Dia Não Existe no Mês Informado');&#13;&#10;        edtMaskDtInicial.SetFocus;&#13;&#10;      End Else&#13;&#10;      if(dia &#62; 30) Then&#13;&#10;      Begin&#13;&#10;        ShowMessage('Dia Não Existe no Mês Informado');&#13;&#10;        edtMaskDtInicial.SetFocus;&#13;&#10;      End;&#13;&#10;    End;&#13;&#10;  End Else&#13;&#10;  Begin&#13;&#10;    Showmessage('Mês Informado Invalido');&#13;&#10;    edtMaskDtInicial.SetFocus;&#13;&#10;  End;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure edtMaskDtFinalOnExit(Sender: TfrxComponent);&#13;&#10;Var&#13;&#10;  mes, dia, ano : integer;&#13;&#10;begin&#13;&#10;  mes := StrToInt(Copy(edtMaskDtFinal.Text, 4, 2));&#13;&#10;  dia := StrToInt(Copy(edtMaskDtFinal.Text, 1, 2));&#13;&#10;  ano := StrToInt(Copy(edtMaskDtFinal.Text, 7, 4));&#13;&#10;  IF((mes &#62;= 1) AND (mes &#60;= 12)) Then&#13;&#10;  Begin&#13;&#10;    IF(mes in [1, 3, 5, 7, 8, 10, 12]) Then&#13;&#10;    Begin&#13;&#10;      if(dia &#62; 31) Then&#13;&#10;      Begin&#13;&#10;        ShowMessage('Dia Não Existe no Mês Informado');&#13;&#10;        edtMaskDtFinal.SetFocus;&#13;&#10;      End;&#13;&#10;    End Else&#13;&#10;    if(mes in [2, 4, 6, 9, 11]) Then&#13;&#10;    Begin&#13;&#10;      if (((mes = 2) and (ano mod 4  = 0) and (dia &#62; 29)) or&#13;&#10;      ((mes = 2) and (ano mod 4  in [1, 2, 3]) and (dia &#62; 28))) Then&#13;&#10;      Begin&#13;&#10;        ShowMessage('Dia Não Existe no Mês Informado');&#13;&#10;        edtMaskDtFinal.SetFocus;&#13;&#10;      End Else&#13;&#10;      if(dia &#62; 30) Then&#13;&#10;      Begin&#13;&#10;        ShowMessage('Dia Não Existe no Mês Informado');&#13;&#10;        edtMaskDtFinal.SetFocus;&#13;&#10;      End;&#13;&#10;    End;&#13;&#10;  End Else&#13;&#10;  Begin&#13;&#10;    Showmessage('Mês Informado Invalido');&#13;&#10;    edtMaskDtFinal.SetFocus;&#13;&#10;  End;&#13;&#10;end;&#13;&#10;&#13;&#10;procedure CkBxTodasOnClick(Sender: TfrxComponent);&#13;&#10;Var&#13;&#10;  i : Integer;&#13;&#10;begin&#13;&#10;  For i := 0 To CkLstBxEmpresa.Items.Count -1 Do&#13;&#10;  Begin&#13;&#10;    CkLstBxEmpresa.Checked[i] := CkBxTodas.Checked;&#13;&#10;  End;&#13;&#10;&#13;&#10;end;&#13;&#10;&#13;&#10;begin&#13;&#10;&#13;&#10;end." OnReportPrint="frxReport1OnReportPrint">
  <Datasets>
    <item DataSet="ESTAB" DataSetName="ESTAB"/>
    <item DataSet="PESSOAS" DataSetName="PESSOAS"/>
    <item DataSet="ESTAB_DIAG" DataSetName="ESTAB_DIAG"/>
    <item DataSet="Qry" DataSetName="Qry"/>
  </Datasets>
  <TfrxDataPage Name="Data" HGuides.Text="" VGuides.Text="" Height="1000" Left="0" Top="0" Width="1000">
    <TfrxShapeView Name="Shape1" AllowVectorExport="True" Left="12" Top="4" Width="124" Height="132" Frame.Typ="0"/>
    <TfrxFDQuery Name="ESTAB" UserName="ESTAB" CloseDataSource="True" FieldAliases.Text="" BCDToCurrency="False" DataSetOptions="0" IgnoreDupParams="False" SQL.Text="SELECT NOM_ESTB, CNPJCPF_ESTB, IE_ESTB, FONE_ESTB, COD_ESTAB FROM ESTAB WHERE COD_ESTAB = :COD_ESTAB" MacroCreate="True" MacroExpand="True" ReadOnly="False" Left="36" Top="20">
      <Parameters>
        <item Name="COD_ESTAB" DataType="ftInteger"/>
      </Parameters>
    </TfrxFDQuery>
    <TfrxFDQuery Name="PESSOAS" UserName="PESSOAS" CloseDataSource="True" FieldAliases.Text="" BCDToCurrency="False" DataSetOptions="0" IgnoreDupParams="False" SQL.Text="SELECT * FROM PESSOAS&#13;&#10;WHERE COALESCE(SIT_PESS, 'AAA') NOT LIKE '%INATIV%' --SITUACAO      &#13;&#10;--AND COALESCE(CLIENT_PESS, 'N') = 'S'  --CLIENTE&#13;&#10;--AND COALESCE(FORN_PESS, 'N') = 'S'  --FORNECEDOR&#13;&#10;--AND COALESCE(FUNC_PESS, 'N') = 'S'  --FUNCIONARIO&#13;&#10;--AND COALESCE(TRANSP_PESS, 'N') = 'S' --TRANSPORTADOR&#13;&#10;--AND COALESCE(VENDED_PESS, 'N') = 'S' --VENDEDOR&#13;&#10;--AND COALESCE(USUARIO_PESS, 'N') = 'S' --USUARIO&#13;&#10;--AND COALESCE(ADMIN_USU, 'N') = 'S' --ADMINISTRADOR &#13;&#10;  " MacroCreate="True" MacroExpand="True" ReadOnly="False" Left="96" Top="20"/>
    <TfrxFDQuery Name="ESTAB_DIAG" UserName="ESTAB_DIAG" CloseDataSource="True" FieldAliases.Text="" BCDToCurrency="False" DataSetOptions="0" IgnoreDupParams="False" SQL.Text="SELECT COD_ESTAB, NOM_ESTB, '[' || COD_ESTAB || '] ' || NOM_ESTB EMPRESA, CNPJCPF_ESTB, IE_ESTB, FONE_ESTB FROM ESTAB WHERE SIT_ESTAB LIKE '%ATIV%'&#13;&#10;ORDER BY 1  " MacroCreate="True" MacroExpand="True" ReadOnly="False" Left="36" Top="80"/>
    <TfrxFDQuery Name="Qry" UserName="Qry" CloseDataSource="True" FieldAliases.Text="" BCDToCurrency="False" DataSetOptions="0" IgnoreDupParams="False" SQL.Text="SELECT GRUPO || ' DE ' || MATERIAL || INDUSTRIALIZACAO || ESPESSURA PRODUTO, UN, SUM(CHPS_ENTRADA) PCS_ENTRADA, SUM(M2_ENTRADA) METRAGEM_ENTRADA, &#13;&#10;       SUM(CHPS_SAIDA) PCS_SAIDAS, SUM(M2_SAIDA) METRAGEM_SAIDAS FROM (&#13;&#10;	SELECT COALESCE(GRP.NOM_GRP, 'SEM GRUPO') GRUPO, COALESCE(MA.NOM_MA, 'SEM MATERIAL') MATERIAL,&#13;&#10;	       IIF(PROD.COD_GRP = 1, '', IIF(COALESCE(TRIM(PROD.TPIND_PROD), '') = '', ' SEM INDUSTRIALIZAÇÃO', ' ' || PROD.TPIND_PROD)) INDUSTRIALIZACAO, &#13;&#10;				    IIF(PROD.COD_GRP = 1, '', ' ' || CAST(PROD.ALTESPLQUNSD_PROD * 100 AS NUMERIC(9, 2)) ||' CM') ESPESSURA, &#13;&#10;        IIF(PROD.COD_GRP = 1, 'M3', 'M2') UN, 1 CHPS_ENTRADA, &#13;&#10;				    IIF(PROD.COD_GRP = 1, (PROD.COMPLQUNSD_PROD * PROD.LARGLQUNSD_PROD * PROD.ALTESPLQUNSD_PROD), &#13;&#10;				                          (COMPLQUNSD_PROD * LARGLQUNSD_PROD)) M2_ENTRADA, 0 CHPS_SAIDA, 0.00 M2_SAIDA FROM PROD&#13;&#10;	INNER JOIN MA ON MA.COD_MA = PROD.COD_MA&#13;&#10;	INNER JOIN GRP ON GRP.COD_GRP = PROD.COD_GRP&#13;&#10;	WHERE (COALESCE(PROD.DTENT_PROD, '01/01/0001 00:00:00') BETWEEN :DI || ' 00:00:00' AND :DF || ' 23:59:59') &#13;&#10;       AND PROD.NAT_ESTQ = 'I' AND GRP.CLASSE_GRP = 10 AND PROD.BLOCO_PROD &#62; 0&#13;&#10;         &#13;&#10;	UNION ALL&#13;&#10;	SELECT IIF(COALESCE(TRIM(GRP.NOM_GRP), '') = '', 'SEM GRUPO', GRP.NOM_GRP) GRUPO, &#13;&#10;        IIF(COALESCE(TRIM(MA.NOM_MA), '') = '', 'SEM MATERIAL', TRIM(MA.NOM_MA)) MATERIAL,&#13;&#10;	       IIF(DOCIT.COD_GRP = 1, '', IIF(COALESCE(TRIM(DOCIT.TPIND_PROD), '')  = '',' SEM INDUSTRIALIZAÇÃO', ' ' || TRIM(DOCIT.TPIND_PROD))) INDUSTRIALIZACAO,&#13;&#10;						  IIF(DOCIT.COD_GRP = 1, '', ' ' || CAST(DOCIT.ALTESPLQUNSD_PROD * 100 AS NUMERIC(9, 2)) ||' CM') ESPESSURA, &#13;&#10;        IIF(DOCIT.COD_GRP = 1, 'M3', 'M2') UN, 0 CHPS_ENTRADA, 0 M2_ENTRADA, QTDEPC_DOCIT CHPS_SAIDA, DOCIT.QTDE_DOCIT M2_SAIDA FROM DOCIT&#13;&#10;	INNER JOIN DOC ON DOCIT.COD_DOC = DOC.COD_DOC&#13;&#10;	INNER JOIN MA ON MA.COD_MA = DOCIT.COD_MA&#13;&#10;	INNER JOIN GRP ON GRP.COD_GRP = DOCIT.COD_GRP&#13;&#10;	WHERE DOC.MOV_DOC = 'S' AND DOC.PRINT_DOC = 'S' AND DOC.COD_AIDF &#60; 0 AND (DOC.EMISS_DOC BETWEEN :DI || ' 00:00:00' AND :DF || ' 23:59:59') &#13;&#10;       AND DOCIT.BLOCO_PROD &#62; 0&#13;&#10;       &#13;&#10;)&#13;&#10;GROUP BY PRODUTO, UN&#13;&#10;ORDER BY 1                           " MacroCreate="True" MacroExpand="True" ReadOnly="False" Left="192" Top="20">
      <Parameters>
        <item Name="DI" DataType="ftDate" Expression="edtMaskDtInicial.Text"/>
        <item Name="DF" DataType="ftDate" Expression="edtMaskDtFinal.Text"/>
        <item Name="DI" DataType="ftDate" Expression="edtMaskDtInicial.Text"/>
        <item Name="DF" DataType="ftDate" Expression="edtMaskDtFinal.Text"/>
      </Parameters>
    </TfrxFDQuery>
  </TfrxDataPage>
  <TfrxReportPage Name="Pagina" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" HGuides.Text="" VGuides.Text="" PaperWidth="210" PaperHeight="297" PaperSize="9" LeftMargin="5" RightMargin="5" TopMargin="5" BottomMargin="5" ColumnWidth="0" ColumnPositions.Text="" Frame.Typ="0" MirrorMode="0" OnBeforePrint="PaginaOnBeforePrint">
    <TfrxHeader Name="Cabecalho" FillType="ftBrush" FillGap.Top="0" FillGap.Left="0" FillGap.Bottom="0" FillGap.Right="0" Frame.Typ="0" Height="29,8976378" Left="0" Top="132" Width="755,906" ReprintOnNewPage="True" Stretched="True">
      <TfrxMemoView Name="Lab_NOM_PESS" AllowVectorExport="True" Left="0" Top="14,8976378" Width="302,36224378" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" ParentFont="False" Text="Produto"/>
      <TfrxMemoView Name="Lab_TOTALG_DOC" AllowVectorExport="True" Left="302,36224378" Top="14,8976377952756" Width="49,13378016" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" HAlign="haCenter" ParentFont="False" Text="Un."/>
      <TfrxMemoView Name="Memo2" AllowVectorExport="True" Left="351,49602394" Top="14,8976378" Width="94,48818898" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="PCS"/>
      <TfrxMemoView Name="Memo4" AllowVectorExport="True" Left="445,98421292" Top="14,8976377952756" Width="94,48818898" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="Metragem"/>
      <TfrxMemoView Name="Memo6" AllowVectorExport="True" Left="540,4724019" Top="14,8976377952756" Width="94,48818898" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="PCS"/>
      <TfrxMemoView Name="Memo9" AllowVectorExport="True" Left="634,96059088" Top="14,8976377952756" Width="94,48818898" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="Metragem"/>
      <TfrxMemoView Name="Memo11" AllowVectorExport="True" Left="351,49602394" Top="0" Width="188,97634378" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" HAlign="haCenter" ParentFont="False" Text="Entrada"/>
      <TfrxMemoView Name="Memo12" AllowVectorExport="True" Left="540,47279" Top="0" Width="188,97634378" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="1" Frame.Typ="0" HAlign="haCenter" ParentFont="False" Text="Saída"/>
    </TfrxHeader>
    <TfrxPageHeader Name="Banda_Titulo" FillType="ftBrush" FillGap.Top="0" FillGap.Left="0" FillGap.Bottom="0" FillGap.Right="0" Frame.Typ="0" Height="95,46098053" Left="0" Top="16" Width="755,906" Stretched="True">
      <TfrxPictureView Name="Picture1" AllowVectorExport="True" Left="0" Top="-0,01149947" Width="113,3859" Height="86,92919" Frame.Style="fsDouble" Frame.Typ="0" HightQuality="False" Transparent="False" TransparentColor="16777215"/>
      <TfrxMemoView Name="Memo_Titulo" AllowVectorExport="True" Left="113,3859" Top="0,53910053" Width="642,5201" Height="15" Font.Charset="1" Font.Color="0" Font.Height="-16" Font.Name="Tahoma" Font.Style="1" Frame.Typ="0" GapY="-1" HAlign="haCenter" ParentFont="False" VAlign="vaBottom" Text="RELATORIO DE MOVIMENTAÇÃO DE ESTOQUE COMERCIAL ENTRE DATAS"/>
      <TfrxMemoView Name="Memo_Empresa" AllowVectorExport="True" Left="113,3859" Top="15,54910053" Width="642,5201" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="2" Frame.Typ="0" HAlign="haCenter" ParentFont="False" Text="[ESTAB.&#34;NOM_ESTB&#34;]"/>
      <TfrxMemoView Name="Memo_Linha1" AllowVectorExport="True" Left="113,3859" Top="30,55910053" Width="642,5201" Height="15" StretchMode="smMaxHeight" Frame.Typ="0" Text="Perido: :Data_Inicial até :Data_Final"/>
      <TfrxMemoView Name="Memo_Linha2" AllowVectorExport="True" Left="113,3859" Top="45,56910053" Width="642,5201" Height="15" StretchMode="smMaxHeight" Frame.Typ="0" Text="Emitido em: [Date] [Time]"/>
      <TfrxMemoView Name="Memo_Linha3" AllowVectorExport="True" Left="113,3859" Top="60,57910053" Width="642,5201" Height="15" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" Frame.Style="fsDouble" Frame.Typ="0" ParentFont="False" Text="Página: [Page#] / [TotalPages#]"/>
      <TfrxMemoView Name="Memo8" AllowVectorExport="True" Left="0" Top="75,57910053" Width="755,906" Height="15,11812" Font.Charset="1" Font.Color="0" Font.Height="-11" Font.Name="Arial Narrow" Font.Style="2" Frame.Style="fsDouble" Frame.Typ="8" HAlign="haCenter" ParentFont="False" Text=""/>
    </TfrxPageHeader>
    <TfrxMasterData Name="Banda_Detalhe" FillType="ftBrush" FillGap.Top="0" FillGap.Left="0" FillGap.Bottom="0" FillGap.Right="0" Frame.Typ="0" Height="15,1" Left="0" Top="180" Width="755,906" OnBeforePrint="Banda_DetalheOnBeforePrint" ColumnWidth="0" ColumnGap="0" DataSet="Qry" DataSetName="Qry" RowCount="0" Stretched="True">
      <TfrxMemoView Name="EMISS_DOC" Align="baLeft" AllowVectorExport="True" Left="302,36224378" Top="0" Width="49,13378016" Height="15" StretchMode="smMaxHeight" DataField="UN" DataSet="Qry" DataSetName="Qry" DisplayFormat.FormatStr="dd/mm/yyyy" DisplayFormat.Kind="fkDateTime" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" Frame.Typ="0" HAlign="haCenter" ParentFont="False" Text="[Qry.&#34;UN&#34;]"/>
      <TfrxMemoView Name="NOM_PESS" Align="baLeft" AllowVectorExport="True" Left="0" Top="0" Width="302,36224378" Height="15" StretchMode="smMaxHeight" DataField="PRODUTO" DataSet="Qry" DataSetName="Qry" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" Frame.Typ="0" ParentFont="False" Text="[Qry.&#34;PRODUTO&#34;]"/>
      <TfrxMemoView Name="Memo3" Align="baLeft" AllowVectorExport="True" Left="351,49602394" Top="0" Width="94,48818898" Height="15" StretchMode="smMaxHeight" DataField="PCS_ENTRADA" DataSet="Qry" DataSetName="Qry" DisplayFormat.DecimalSeparator="," DisplayFormat.FormatStr="%2.2n" DisplayFormat.Kind="fkNumeric" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="[Qry.&#34;PCS_ENTRADA&#34;]"/>
      <TfrxMemoView Name="Memo5" Align="baLeft" AllowVectorExport="True" Left="445,98421292" Top="0" Width="94,48818898" Height="15" StretchMode="smMaxHeight" DataField="METRAGEM_ENTRADA" DataSet="Qry" DataSetName="Qry" DisplayFormat.DecimalSeparator="," DisplayFormat.FormatStr="%2.2n" DisplayFormat.Kind="fkNumeric" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="[Qry.&#34;METRAGEM_ENTRADA&#34;]"/>
      <TfrxMemoView Name="Memo7" Align="baLeft" AllowVectorExport="True" Left="540,4724019" Top="0" Width="94,48818898" Height="15" StretchMode="smMaxHeight" DataField="PCS_SAIDAS" DataSet="Qry" DataSetName="Qry" DisplayFormat.DecimalSeparator="," DisplayFormat.FormatStr="%2.2n" DisplayFormat.Kind="fkNumeric" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="[Qry.&#34;PCS_SAIDAS&#34;]"/>
      <TfrxMemoView Name="Memo10" Align="baLeft" AllowVectorExport="True" Left="634,96059088" Top="0" Width="94,48818898" Height="15" StretchMode="smMaxHeight" DataField="METRAGEM_SAIDAS" DataSet="Qry" DataSetName="Qry" DisplayFormat.DecimalSeparator="," DisplayFormat.FormatStr="%2.2n" DisplayFormat.Kind="fkNumeric" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial Narrow" Font.Style="0" Frame.Typ="0" HAlign="haRight" ParentFont="False" Text="[Qry.&#34;METRAGEM_SAIDAS&#34;]"/>
    </TfrxMasterData>
    <TfrxPageFooter Name="Banda_Rodape" FillType="ftBrush" FillGap.Top="0" FillGap.Left="0" FillGap.Bottom="0" FillGap.Right="0" Frame.Typ="0" Height="15,11811024" Left="0" Top="236" Width="755,906"/>
    <TfrxFooter Name="Footer1" FillType="ftBrush" FillGap.Top="0" FillGap.Left="0" FillGap.Bottom="0" FillGap.Right="0" Frame.Typ="0" Height="0" Left="0" Top="216" Width="755,906"/>
  </TfrxReportPage>
  <TfrxDialogPage Name="dDialogPage" Font.Charset="1" Font.Color="0" Font.Height="-11" Font.Name="Tahoma" Font.Style="0" HGuides.Text="" VGuides.Text="" BorderStyle="bsSizeToolWin" DoubleBuffered="False" Height="304" ClientHeight="265" Left="524" Top="235" Width="423" Scaled="True" ClientWidth="407" OnCloseQuery="dDialogPageOnCloseQuery" OnShow="dDialogPageOnShow">
    <TfrxPageControl Name="PageControl1" Left="2" Top="2" Width="400" Height="260" ShowHint="True" TabOrder="0"/>
    <TfrxGroupBoxControl Name="groupDatas" Left="10" Top="7" Width="385" Height="62" ShowHint="True" Color="-16777201">
      <TfrxLabelControl Name="llabelCombo" Left="184" Top="12" Width="41" Height="16" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial Narrow" Font.Style="1" ParentFont="False" ShowHint="True" Caption="Período" Color="-16777201"/>
      <TfrxLabelControl Name="lblDataInicial" Left="8" Top="12" Width="59" Height="16" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial Narrow" Font.Style="1" ParentFont="False" ShowHint="True" Caption="Data Inicial" Color="-16777201"/>
      <TfrxLabelControl Name="lblDataFinal" Left="98" Top="12" Width="53" Height="16" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial Narrow" Font.Style="1" ParentFont="False" ShowHint="True" Caption="Data Final" Color="-16777201"/>
      <TfrxMaskEditControl Name="edtMaskDtInicial" Left="8" Top="28" Width="80" Height="21" ShowHint="True" Color="-16777211" EditMask="!99/99/0000;1;_" MaxLength="10" Text="__/__/____" OnExit="edtMaskDtInicialOnExit" OnKeyPress="edtMaskDtInicialOnKeyPress"/>
      <TfrxMaskEditControl Name="edtMaskDtFinal" Left="96" Top="28" Width="80" Height="21" ShowHint="True" Color="-16777211" EditMask="!99/99/0000;1;_" MaxLength="10" Text="__/__/____" OnExit="edtMaskDtFinalOnExit" OnKeyPress="edtMaskDtFinalOnKeyPress"/>
      <TfrxComboBoxControl Name="cbPeriodo" Left="184" Top="28" Width="194" Height="21" ShowHint="True" Color="-16777211" Items.Text="ENTRE DATAS&#13;&#10;ONTEM&#13;&#10;HOJE&#13;&#10;AMANHA&#13;&#10;SEMANA ANTERIOR &#13;&#10;SEMANA ATUAL&#13;&#10;SEMANA SEGUINTE&#13;&#10;MES ANTERIOR&#13;&#10;MES ATUAL&#13;&#10;MES SEGUINTE&#13;&#10;ANO ANTERIOR&#13;&#10;ANO ATUAL&#13;&#10;ANO SEGUINTE" Style="csDropDownList" Text="ENTRE DATAS" ItemIndex="0" OnChange="ComboBox1OnChange"/>
    </TfrxGroupBoxControl>
    <TfrxCheckBoxControl Name="CheckBox1" Left="198" Top="230" Width="45" Height="17" ShowHint="True" Alignment="taLeftJustify" Caption="Logo" Checked="True" State="cbChecked" Color="-16777201" OnClick="CheckBox1OnClick"/>
    <TfrxButtonControl Name="btnOK" Left="268" Top="225" Width="60" Height="25" ShowHint="True" Caption="OK" ModalResult="1" OnClick="btnOKOnClick"/>
    <TfrxButtonControl Name="btnCancelar" Left="335" Top="225" Width="60" Height="25" ShowHint="True" Caption="Cancelar" ModalResult="2"/>
    <TfrxGroupBoxControl Name="GroupBox1" Left="10" Top="70" Width="385" Height="145" ShowHint="True" Caption="Empresa" Color="-16777201">
      <TfrxCheckListBoxControl Name="CkLstBxEmpresa" Left="8" Top="16" Width="368" Height="101" ShowHint="True" Color="-16777211" Items.Text=""/>
      <TfrxCheckBoxControl Name="CkBxTodas" Left="331" Top="126" Width="45" Height="17" ShowHint="True" Caption="Todas" Color="-16777201" OnClick="CkBxTodasOnClick"/>
    </TfrxGroupBoxControl>
  </TfrxDialogPage>
</TfrxReport>
